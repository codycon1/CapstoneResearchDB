Index: home/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\n\n\n# Create your models here.\nclass Project(models.Model):\n    email = models.EmailField(max_length=256)\n    date = models.DateField(auto_now=True)\n    projectAuthor = models.CharField(max_length=128)\n    projectTitle = models.CharField(max_length=100, verbose_name=\"Project Title\")\n    projectDescription = models.CharField(max_length=256, verbose_name=\"Project Description\")\n    proposalFile = models.FileField(upload_to='projects/proposals', verbose_name=\"Proposal\", null=True)\n    approval = models.BooleanField(default=False)\n\n    def __str__(self):\n        self.projectInfo = (self.projectAuthor, self.date, self.projectTitle, self.proposalFile)\n        return str(self.projectInfo)\n\n\nclass ProjectFile(models.Model):\n    projectID = models.ForeignKey(Project, on_delete=models.CASCADE)\n    userEmail = models.EmailField(max_length=256)\n    file = models.FileField(upload_to='projects/')\n    uploadDate = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return str(self.id)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/home/models.py b/home/models.py
--- a/home/models.py	
+++ b/home/models.py	
@@ -8,7 +8,9 @@
     projectAuthor = models.CharField(max_length=128)
     projectTitle = models.CharField(max_length=100, verbose_name="Project Title")
     projectDescription = models.CharField(max_length=256, verbose_name="Project Description")
-    proposalFile = models.FileField(upload_to='projects/proposals', verbose_name="Proposal", null=True)
+    proposalFile = models.FileField(upload_to='projects/proposals')
+    dataFile = models.FileField(upload_to='projects/datasets', verbose_name="Data", null=True)
+    resultFile = models.FileField(upload_to='projects/results', verbose_name="Results", null=True)
     approval = models.BooleanField(default=False)
 
     def __str__(self):
Index: home/migrations/0004_auto_20220415_1103.py
===================================================================
diff --git a/home/migrations/0004_auto_20220415_1103.py b/home/migrations/0004_auto_20220415_1103.py
deleted file mode 100644
--- a/home/migrations/0004_auto_20220415_1103.py	
+++ /dev/null	
@@ -1,22 +0,0 @@
-# Generated by Django 3.2.12 on 2022-04-15 17:03
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('home', '0003_proposal'),
-    ]
-
-    operations = [
-        migrations.RenameField(
-            model_name='project',
-            old_name='dataFiles',
-            new_name='proposalFile',
-        ),
-        migrations.RemoveField(
-            model_name='project',
-            name='resultFiles',
-        ),
-    ]
Index: home/migrations/0003_proposal.py
===================================================================
diff --git a/home/migrations/0003_proposal.py b/home/migrations/0003_proposal.py
deleted file mode 100644
--- a/home/migrations/0003_proposal.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-# Generated by Django 3.2.12 on 2022-04-13 17:29
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('home', '0002_auto_20220411_1122'),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Proposal',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('email', models.EmailField(max_length=256)),
-                ('author', models.CharField(max_length=50)),
-                ('title', models.CharField(max_length=128)),
-                ('description', models.CharField(max_length=256)),
-                ('approval', models.BooleanField(default=False)),
-            ],
-        ),
-    ]
Index: home/migrations/0007_project_email.py
===================================================================
diff --git a/home/migrations/0007_project_email.py b/home/migrations/0007_project_email.py
deleted file mode 100644
--- a/home/migrations/0007_project_email.py	
+++ /dev/null	
@@ -1,19 +0,0 @@
-# Generated by Django 3.2.12 on 2022-04-15 17:26
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('home', '0006_auto_20220415_1118'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='project',
-            name='email',
-            field=models.EmailField(default='cody.conner@western.edu', max_length=256),
-            preserve_default=False,
-        ),
-    ]
Index: home/migrations/0005_auto_20220415_1111.py
===================================================================
diff --git a/home/migrations/0005_auto_20220415_1111.py b/home/migrations/0005_auto_20220415_1111.py
deleted file mode 100644
--- a/home/migrations/0005_auto_20220415_1111.py	
+++ /dev/null	
@@ -1,24 +0,0 @@
-# Generated by Django 3.2.12 on 2022-04-15 17:11
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('home', '0004_auto_20220415_1103'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='project',
-            name='projectDescription',
-            field=models.CharField(default='tmp', max_length=256),
-            preserve_default=False,
-        ),
-        migrations.AlterField(
-            model_name='project',
-            name='proposalFile',
-            field=models.FileField(upload_to='projects/proposals'),
-        ),
-    ]
Index: proposal/migrations/0003_delete_proposal.py
===================================================================
diff --git a/proposal/migrations/0003_delete_proposal.py b/proposal/migrations/0003_delete_proposal.py
deleted file mode 100644
--- a/proposal/migrations/0003_delete_proposal.py	
+++ /dev/null	
@@ -1,16 +0,0 @@
-# Generated by Django 3.2.12 on 2022-04-13 17:29
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('proposal', '0002_proposal_email'),
-    ]
-
-    operations = [
-        migrations.DeleteModel(
-            name='proposal',
-        ),
-    ]
Index: home/migrations/0006_auto_20220415_1118.py
===================================================================
diff --git a/home/migrations/0006_auto_20220415_1118.py b/home/migrations/0006_auto_20220415_1118.py
deleted file mode 100644
--- a/home/migrations/0006_auto_20220415_1118.py	
+++ /dev/null	
@@ -1,31 +0,0 @@
-# Generated by Django 3.2.12 on 2022-04-15 17:18
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('home', '0005_auto_20220415_1111'),
-    ]
-
-    operations = [
-        migrations.DeleteModel(
-            name='Proposal',
-        ),
-        migrations.AlterField(
-            model_name='project',
-            name='projectDescription',
-            field=models.CharField(max_length=256, verbose_name='Project Description'),
-        ),
-        migrations.AlterField(
-            model_name='project',
-            name='projectTitle',
-            field=models.CharField(max_length=100, verbose_name='Project Title'),
-        ),
-        migrations.AlterField(
-            model_name='project',
-            name='proposalFile',
-            field=models.FileField(null=True, upload_to='projects/proposals', verbose_name='Proposal'),
-        ),
-    ]
Index: home/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\n\nfrom pytz import timezone\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect\n\nfrom users.views import initialize_context\nfrom .forms import *\nfrom .models import *\n\n\n# Create your views here.\ndef home(request):\n    context = initialize_context(request)\n    return render(request, 'home.html', context)\n\n\n# def submit_proposal(request):\n#     context = initialize_context(request)\n#     user = request.session\n#     if request.method == 'POST':\n#         form = SubmitProposalForm(request.POST)\n#         if form.is_valid():\n#             p = form.save(commit=False)\n#             p.author = user['user']['name']\n#             p.email = user['user']['email']\n#             p.save()\n#             return redirect('/')\n#     else:\n#         form = SubmitProposalForm()\n#\n#     context['form'] = form\n#     return render(request, 'newproposal.html', context)\n\n\ndef viewSubmissions(request):\n    userInfo = request.session\n    context = {'accepted': Project.objects.filter(approval=True, email=userInfo['user']['email']),\n               'pending': Project.objects.filter(approval=False, email=userInfo['user']['email']),\n               'user': userInfo['user']}\n    return render(request, 'myproposals.html', context)\n\n\ndef SearchRequest(request):\n    context = initialize_context(request)\n    user = context['user']\n    if request.method == 'GET':\n        projectName = request.GET.get(\"search\")\n        status = Project.objects.filter(\n            Q(projectTitle__icontains=projectName, approval=True) | Q(projectAuthor__icontains=projectName,\n                                                                      approval=True))\n        return render(request, \"SearchResults.html\", {\"projects\": status, 'user': user})\n    else:\n        return render(request, \"SearchResults.html\", {'user': user})\n\n\ndef saveFileUpload(request):\n    try:\n        context = request.session\n        authorName = context['user']['name']\n        authorEmail = context['user']['email']\n        form = UploadFileForm(\n            initial={'projectAuthor': authorName, 'email': authorEmail})\n        try:\n            if request.method == 'POST':\n                form = UploadFileForm(request.POST, request.FILES)\n                if form.is_valid():\n                    projdata = form.save(commit=False)\n                    projdata.email = request.session['user']['email']\n                    projdata.projectAuthor = request.session['user']['name']\n                    projdata.save()\n                    project_info = form.instance()\n                    return render(request, 'fileupload.html',\n                                  {'form': form, 'project_info': project_info, 'user': context['user']})\n                else:\n                    print(form.errors)\n                    form = UploadFileForm()\n                return render(request, 'fileupload.html', {'form': form, 'user': context['user']})\n        except Exception as identifier:\n            print(identifier)\n        return render(request, 'fileupload.html', {'form': form, 'user': context['user']})\n    except:\n        return render(request, 'UnauthorizedPage.html')\n\n\ndef unauthorized(request):\n    return render(request, 'UnauthorizedPage.html')\n\n\ndef approveProposal(request):\n    try:\n        if not request.session['user']['is_staff']:\n            return redirect('unauthorized')\n        else:\n            userInfo = request.session\n            context = {'pending': Project.objects.filter(approval=False), 'user': userInfo['user']}\n            if request.method == 'POST':\n                id = request.POST.get('id', 0)\n                proposalObject = Project.objects.get(id=request.POST['id'])\n                title = request.POST.get('projectTitle', \"\")\n                if 'approve' in request.POST:\n                    proposalObject.approval = True\n                    proposalObject.save()\n                elif 'delete' in request.POST:\n                    proposalObject.delete()\n            else:\n                pass\n        return render(request, 'approveproposal.html', context)\n    except:\n        return redirect('unauthorized')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/home/views.py b/home/views.py
--- a/home/views.py	
+++ b/home/views.py	
@@ -88,23 +88,20 @@
 
 
 def approveProposal(request):
-    try:
-        if not request.session['user']['is_staff']:
-            return redirect('unauthorized')
-        else:
-            userInfo = request.session
-            context = {'pending': Project.objects.filter(approval=False), 'user': userInfo['user']}
-            if request.method == 'POST':
-                id = request.POST.get('id', 0)
-                proposalObject = Project.objects.get(id=request.POST['id'])
-                title = request.POST.get('projectTitle', "")
-                if 'approve' in request.POST:
-                    proposalObject.approval = True
-                    proposalObject.save()
-                elif 'delete' in request.POST:
-                    proposalObject.delete()
-            else:
-                pass
-        return render(request, 'approveproposal.html', context)
-    except:
-        return redirect('unauthorized')
+    if not request.session['user']['is_staff']:
+        return redirect('unauthorized')
+    else:
+        userInfo = request.session
+        context = {'pending': Project.objects.filter(approval=False), 'user': userInfo['user']}
+        if request.method == 'POST':
+            id = request.POST.get('id', 0)
+            proposalObject = Project.objects.get(id=request.POST['id'])
+            title = request.POST.get('projectTitle', "")
+            if 'approve' in request.POST:
+                proposalObject.approval = True
+                proposalObject.save()
+            elif 'delete' in request.POST:
+                proposalObject.delete()
+        else:
+            pass
+    return render(request, 'approveproposal.html', context)
Index: .idea/capstone.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"FacetManager\">\n    <facet type=\"django\" name=\"Django\">\n      <configuration>\n        <option name=\"rootFolder\" value=\"$MODULE_DIR$\" />\n        <option name=\"settingsModule\" value=\"capstone/settings.py\" />\n        <option name=\"manageScript\" value=\"$MODULE_DIR$/manage.py\" />\n        <option name=\"environment\" value=\"&lt;map/&gt;\" />\n        <option name=\"doNotUseTestRunner\" value=\"false\" />\n        <option name=\"trackFilePattern\" value=\"migrations\" />\n      </configuration>\n    </facet>\n  </component>\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 (CapstoneResearchDB)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"style\" level=\"application\" />\n    <orderEntry type=\"library\" name=\"animate.css\" level=\"application\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n  </component>\n  <component name=\"TemplatesService\">\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Django\" />\n    <option name=\"TEMPLATE_FOLDERS\">\n      <list>\n        <option value=\"$MODULE_DIR$/templates\" />\n      </list>\n    </option>\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/capstone.iml b/.idea/capstone.iml
--- a/.idea/capstone.iml	
+++ b/.idea/capstone.iml	
@@ -16,7 +16,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.8 (CapstoneResearchDB)" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" name="style" level="application" />
     <orderEntry type="library" name="animate.css" level="application" />
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 (CapstoneResearchDB)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (CapstoneResearchDB)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (capstone)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: home/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django import forms\nfrom django.contrib.auth.forms import UserCreationForm\n\nfrom .models import *\n\n# class SubmitProposalForm(forms.ModelForm):\n#     class Meta:\n#         model = Proposal\n#         fields = [\n#             'title',\n#             'description',\n#         ]\n#\n#     def __str__(self):\n#         return self.title\n#\n#     # Default approval and user to false / current login user\n\n\nclass editProjectForm(forms.ModelForm):\n    class Meta:\n        model = Project\n        fields = ('approval',)\n\n\nclass UploadFileForm(forms.ModelForm):\n    class Meta:\n        model = Project\n        fields = ('projectTitle', 'projectDescription', 'proposalFile')\n\n\nclass SignupForm(UserCreationForm):\n    first_name = forms.CharField(max_length=32, required=True, help_text='First Name')\n    last_name = forms.CharField(max_length=32, required=True, help_text='Last Name')\n    email = forms.CharField(max_length=64, required=True, help_text='email')\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/home/forms.py b/home/forms.py
--- a/home/forms.py	
+++ b/home/forms.py	
@@ -3,6 +3,7 @@
 
 from .models import *
 
+
 # class SubmitProposalForm(forms.ModelForm):
 #     class Meta:
 #         model = Proposal
@@ -26,12 +27,10 @@
 class UploadFileForm(forms.ModelForm):
     class Meta:
         model = Project
-        fields = ('projectTitle', 'projectDescription', 'proposalFile')
+        fields = ('projectTitle', 'projectDescription', 'proposalFile', 'dataFile', 'resultFile')
 
 
 class SignupForm(UserCreationForm):
     first_name = forms.CharField(max_length=32, required=True, help_text='First Name')
     last_name = forms.CharField(max_length=32, required=True, help_text='Last Name')
     email = forms.CharField(max_length=64, required=True, help_text='email')
-
-
